library(BT)
library(roxygen2)
roxygenise()
library(BT)
library(devtools)
devtools::find_rtools()
install.packages("Rtools")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
install.packages("jsonlite", type = "source")
library(jsonlite)
jsonlite::minify()
library(roxygen2)
roxygen2::roxygenise()
library(BT)
library(BT)
roxygenise()
library(BT)
roxygenise()
library(BT)
?BT_call
?BT
roxygenise()
library(BT)
library(BT)
roxygenise()
library(BT)
roxygenise()
library(BT)
library(statmod)
install.packages("gbm3")
?BTFit
roxygenise()
library(BT)
?summary.BTFit
?as.double.BTPerformance
roxygenise()
library(BT)
roxygenise()
library(BT)
roxygenise()
library(BT)
library(devtools)
use_description()
roxygenise()
roxygenise()
library(BT)
desc()
desc(BT)
desc(package = "BT")
library(BT)
library(utils)
packageDescription(BT)
packageDescription("BT")
usethis::use_gpl3_license()
roxygenise()
library(BT)
library(devtools)
devtools::check()
roxygenise()
library(BT)
library(devtools)
devtools::check()
roxygenise
roxygenise()
library(BT)
library(devtools)
devtools::check()
roxygenise()
library(BT)
library(devtools)
check()
roxygenise()
library(BT)
library(devtools)
check()
?sample
library(BT)
library(devtools)
check())
check()
roxygenise()
library(BT)
library(devtools)
check()
library(rpart)
rpart.predict
install.packages("rpart.plot")
library(rpart.plot)
?rpart.predict
library(rpart)
predict.rpart
#######################################
# Example standard boosting (Poisson) #
#######################################
library(rpart)
library(rpart.plot)
set.seed(100)
#
# training set
#
n <- 500000 # size of training set (number of observations)
Gender <- factor(sample(c("male","female"),n,replace=TRUE))
Age <- sample(c(18:65),n,replace=TRUE)
Split <- factor(sample(c("yes","no"),n,replace=TRUE))
Sport <- factor(sample(c("yes","no"),n,replace=TRUE))
lambda <- 0.1*ifelse(Gender=="male",1.1,1)
lambda <- lambda*(1+1/(Age-17)^0.5)
lambda <- lambda*ifelse(Sport=="yes",1.15,1)
ExpoR <- rep(1,n) # ExpoR = 1
Y <- rpois(n, ExpoR*lambda)
trainingset <- data.frame(Y,Gender,Age,Split,Sport,ExpoR)
#
# validation set
#
n.val <- 1500000 # size of validation set (number of observations)
Gender <- factor(sample(c("male","female"),n.val,replace=TRUE))
Age <- sample(c(18:65),n.val,replace=TRUE)
Split <- factor(sample(c("yes","no"),n.val,replace=TRUE))
Sport <- factor(sample(c("yes","no"),n.val,replace=TRUE))
lambda <- 0.1*ifelse(Gender=="male",1.1,1)
lambda <- lambda*(1+1/(Age-17)^0.5)
lambda <- lambda*ifelse(Sport=="yes",1.15,1)
ExpoR <- rep(1,n.val) # ExpoR = 1
Y <- rpois(n.val, ExpoR*lambda)
validationset <- data.frame(Y,Gender,Age,Split,Sport,ExpoR,lambda)
#
# optimal tree
#
depth<-10
tree <- rpart(Y ~ Gender+Age+Split+Sport+offset(log(ExpoR)), data = trainingset, method="poisson",
control = rpart.control(cp=0, maxdepth = depth)) # cp = complexity parameter, maxdepth = maximum depth of any node of the final tree (root node counted as depth 0)
printcp(tree)
tree.opt <- prune(tree,cp=2.39e-05)
predict(tree, trainingset)
predict(tree, trainingset, type = vector)
predict(tree, trainingset, type = "vector")
check()
roxygenise()
library(BT)
library(devtools)
check()
roxygenise()
library(BT)
library(devtools)
check()
roxygenise()
library(BT)
library(devtools)
check()
install.packages("parallel")
roxygenise()
library(BT)
library(devtools)
check()
library(BT)
roxygenise()
library(BT)
library(devtools)
check()
